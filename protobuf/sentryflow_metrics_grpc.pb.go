// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: sentryflow_metrics.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	APIClassifier_ClassifyAPIs_FullMethodName = "/protobuf.APIClassifier/ClassifyAPIs"
)

// APIClassifierClient is the client API for APIClassifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClassifierClient interface {
	ClassifyAPIs(ctx context.Context, opts ...grpc.CallOption) (APIClassifier_ClassifyAPIsClient, error)
}

type aPIClassifierClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClassifierClient(cc grpc.ClientConnInterface) APIClassifierClient {
	return &aPIClassifierClient{cc}
}

func (c *aPIClassifierClient) ClassifyAPIs(ctx context.Context, opts ...grpc.CallOption) (APIClassifier_ClassifyAPIsClient, error) {
	stream, err := c.cc.NewStream(ctx, &APIClassifier_ServiceDesc.Streams[0], APIClassifier_ClassifyAPIs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIClassifierClassifyAPIsClient{stream}
	return x, nil
}

type APIClassifier_ClassifyAPIsClient interface {
	Send(*APIClassifierRequest) error
	Recv() (*APIClassifierResponse, error)
	grpc.ClientStream
}

type aPIClassifierClassifyAPIsClient struct {
	grpc.ClientStream
}

func (x *aPIClassifierClassifyAPIsClient) Send(m *APIClassifierRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIClassifierClassifyAPIsClient) Recv() (*APIClassifierResponse, error) {
	m := new(APIClassifierResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIClassifierServer is the server API for APIClassifier service.
// All implementations should embed UnimplementedAPIClassifierServer
// for forward compatibility
type APIClassifierServer interface {
	ClassifyAPIs(APIClassifier_ClassifyAPIsServer) error
}

// UnimplementedAPIClassifierServer should be embedded to have forward compatible implementations.
type UnimplementedAPIClassifierServer struct {
}

func (UnimplementedAPIClassifierServer) ClassifyAPIs(APIClassifier_ClassifyAPIsServer) error {
	return status.Errorf(codes.Unimplemented, "method ClassifyAPIs not implemented")
}

// UnsafeAPIClassifierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIClassifierServer will
// result in compilation errors.
type UnsafeAPIClassifierServer interface {
	mustEmbedUnimplementedAPIClassifierServer()
}

func RegisterAPIClassifierServer(s grpc.ServiceRegistrar, srv APIClassifierServer) {
	s.RegisterService(&APIClassifier_ServiceDesc, srv)
}

func _APIClassifier_ClassifyAPIs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIClassifierServer).ClassifyAPIs(&aPIClassifierClassifyAPIsServer{stream})
}

type APIClassifier_ClassifyAPIsServer interface {
	Send(*APIClassifierResponse) error
	Recv() (*APIClassifierRequest, error)
	grpc.ServerStream
}

type aPIClassifierClassifyAPIsServer struct {
	grpc.ServerStream
}

func (x *aPIClassifierClassifyAPIsServer) Send(m *APIClassifierResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIClassifierClassifyAPIsServer) Recv() (*APIClassifierRequest, error) {
	m := new(APIClassifierRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIClassifier_ServiceDesc is the grpc.ServiceDesc for APIClassifier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIClassifier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.APIClassifier",
	HandlerType: (*APIClassifierServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClassifyAPIs",
			Handler:       _APIClassifier_ClassifyAPIs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sentryflow_metrics.proto",
}
