// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: sentryflow.proto

package golang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SentryFlow_GetAPILog_FullMethodName       = "/protobuf.SentryFlow/GetAPILog"
	SentryFlow_GetAPIEvent_FullMethodName     = "/protobuf.SentryFlow/GetAPIEvent"
	SentryFlow_SendAPIEvent_FullMethodName    = "/protobuf.SentryFlow/SendAPIEvent"
	SentryFlow_GetAPIMetrics_FullMethodName   = "/protobuf.SentryFlow/GetAPIMetrics"
	SentryFlow_GetEnvoyMetrics_FullMethodName = "/protobuf.SentryFlow/GetEnvoyMetrics"
)

// SentryFlowClient is the client API for SentryFlow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SentryFlowClient interface {
	// Deprecated: Do not use.
	GetAPILog(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[APILog], error)
	GetAPIEvent(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[APIEvent], error)
	SendAPIEvent(ctx context.Context, in *APIEvent, opts ...grpc.CallOption) (*APIEvent, error)
	GetAPIMetrics(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[APIMetrics], error)
	GetEnvoyMetrics(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EnvoyMetrics], error)
}

type sentryFlowClient struct {
	cc grpc.ClientConnInterface
}

func NewSentryFlowClient(cc grpc.ClientConnInterface) SentryFlowClient {
	return &sentryFlowClient{cc}
}

// Deprecated: Do not use.
func (c *sentryFlowClient) GetAPILog(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[APILog], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SentryFlow_ServiceDesc.Streams[0], SentryFlow_GetAPILog_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientInfo, APILog]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SentryFlow_GetAPILogClient = grpc.ServerStreamingClient[APILog]

func (c *sentryFlowClient) GetAPIEvent(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[APIEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SentryFlow_ServiceDesc.Streams[1], SentryFlow_GetAPIEvent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientInfo, APIEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SentryFlow_GetAPIEventClient = grpc.ServerStreamingClient[APIEvent]

func (c *sentryFlowClient) SendAPIEvent(ctx context.Context, in *APIEvent, opts ...grpc.CallOption) (*APIEvent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIEvent)
	err := c.cc.Invoke(ctx, SentryFlow_SendAPIEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sentryFlowClient) GetAPIMetrics(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[APIMetrics], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SentryFlow_ServiceDesc.Streams[2], SentryFlow_GetAPIMetrics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientInfo, APIMetrics]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SentryFlow_GetAPIMetricsClient = grpc.ServerStreamingClient[APIMetrics]

func (c *sentryFlowClient) GetEnvoyMetrics(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EnvoyMetrics], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SentryFlow_ServiceDesc.Streams[3], SentryFlow_GetEnvoyMetrics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientInfo, EnvoyMetrics]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SentryFlow_GetEnvoyMetricsClient = grpc.ServerStreamingClient[EnvoyMetrics]

// SentryFlowServer is the server API for SentryFlow service.
// All implementations must embed UnimplementedSentryFlowServer
// for forward compatibility.
type SentryFlowServer interface {
	// Deprecated: Do not use.
	GetAPILog(*ClientInfo, grpc.ServerStreamingServer[APILog]) error
	GetAPIEvent(*ClientInfo, grpc.ServerStreamingServer[APIEvent]) error
	SendAPIEvent(context.Context, *APIEvent) (*APIEvent, error)
	GetAPIMetrics(*ClientInfo, grpc.ServerStreamingServer[APIMetrics]) error
	GetEnvoyMetrics(*ClientInfo, grpc.ServerStreamingServer[EnvoyMetrics]) error
	mustEmbedUnimplementedSentryFlowServer()
}

// UnimplementedSentryFlowServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSentryFlowServer struct{}

func (UnimplementedSentryFlowServer) GetAPILog(*ClientInfo, grpc.ServerStreamingServer[APILog]) error {
	return status.Errorf(codes.Unimplemented, "method GetAPILog not implemented")
}
func (UnimplementedSentryFlowServer) GetAPIEvent(*ClientInfo, grpc.ServerStreamingServer[APIEvent]) error {
	return status.Errorf(codes.Unimplemented, "method GetAPIEvent not implemented")
}
func (UnimplementedSentryFlowServer) SendAPIEvent(context.Context, *APIEvent) (*APIEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAPIEvent not implemented")
}
func (UnimplementedSentryFlowServer) GetAPIMetrics(*ClientInfo, grpc.ServerStreamingServer[APIMetrics]) error {
	return status.Errorf(codes.Unimplemented, "method GetAPIMetrics not implemented")
}
func (UnimplementedSentryFlowServer) GetEnvoyMetrics(*ClientInfo, grpc.ServerStreamingServer[EnvoyMetrics]) error {
	return status.Errorf(codes.Unimplemented, "method GetEnvoyMetrics not implemented")
}
func (UnimplementedSentryFlowServer) mustEmbedUnimplementedSentryFlowServer() {}
func (UnimplementedSentryFlowServer) testEmbeddedByValue()                    {}

// UnsafeSentryFlowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SentryFlowServer will
// result in compilation errors.
type UnsafeSentryFlowServer interface {
	mustEmbedUnimplementedSentryFlowServer()
}

func RegisterSentryFlowServer(s grpc.ServiceRegistrar, srv SentryFlowServer) {
	// If the following call pancis, it indicates UnimplementedSentryFlowServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SentryFlow_ServiceDesc, srv)
}

func _SentryFlow_GetAPILog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SentryFlowServer).GetAPILog(m, &grpc.GenericServerStream[ClientInfo, APILog]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SentryFlow_GetAPILogServer = grpc.ServerStreamingServer[APILog]

func _SentryFlow_GetAPIEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SentryFlowServer).GetAPIEvent(m, &grpc.GenericServerStream[ClientInfo, APIEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SentryFlow_GetAPIEventServer = grpc.ServerStreamingServer[APIEvent]

func _SentryFlow_SendAPIEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentryFlowServer).SendAPIEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SentryFlow_SendAPIEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentryFlowServer).SendAPIEvent(ctx, req.(*APIEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _SentryFlow_GetAPIMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SentryFlowServer).GetAPIMetrics(m, &grpc.GenericServerStream[ClientInfo, APIMetrics]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SentryFlow_GetAPIMetricsServer = grpc.ServerStreamingServer[APIMetrics]

func _SentryFlow_GetEnvoyMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SentryFlowServer).GetEnvoyMetrics(m, &grpc.GenericServerStream[ClientInfo, EnvoyMetrics]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SentryFlow_GetEnvoyMetricsServer = grpc.ServerStreamingServer[EnvoyMetrics]

// SentryFlow_ServiceDesc is the grpc.ServiceDesc for SentryFlow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SentryFlow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.SentryFlow",
	HandlerType: (*SentryFlowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendAPIEvent",
			Handler:    _SentryFlow_SendAPIEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAPILog",
			Handler:       _SentryFlow_GetAPILog_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAPIEvent",
			Handler:       _SentryFlow_GetAPIEvent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAPIMetrics",
			Handler:       _SentryFlow_GetAPIMetrics_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEnvoyMetrics",
			Handler:       _SentryFlow_GetEnvoyMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sentryflow.proto",
}
